"use strict";(self.webpackChunkaws_cheatsheet=self.webpackChunkaws_cheatsheet||[]).push([[1221],{5824:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"iot/freertos","title":"FreeRTOS","description":"What is it","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/iot/freertos.md","sourceDirName":"iot","slug":"/iot/freertos","permalink":"/aws-cheatsheet/docs/iot/freertos","draft":false,"unlisted":false,"editUrl":"https://github.com/EmersonBraun/aws-cheatsheet/blob/master/docs/iot/freertos.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"AWS Outposts","permalink":"/aws-cheatsheet/docs/hybrid/outposts"},"next":{"title":"AWS IoT Core","permalink":"/aws-cheatsheet/docs/iot/iot-core"}}');var n=t(4848),r=t(8453);const o={sidebar_position:4},a="FreeRTOS",l={},c=[{value:"What is it",id:"what-is-it",level:2},{value:"What it&#39;s for",id:"what-its-for",level:2},{value:"Use cases",id:"use-cases",level:2},{value:"Key points",id:"key-points",level:2},{value:"Comparison",id:"comparison",level:2}];function d(e){const s={h1:"h1",h2:"h2",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.header,{children:(0,n.jsx)(s.h1,{id:"freertos",children:"FreeRTOS"})}),"\n",(0,n.jsx)(s.h2,{id:"what-is-it",children:"What is it"}),"\n",(0,n.jsx)(s.p,{children:"An open-source real-time operating system (RTOS) for microcontrollers and small embedded devices."}),"\n",(0,n.jsx)(s.h2,{id:"what-its-for",children:"What it's for"}),"\n",(0,n.jsx)(s.p,{children:"Enable small, low-power devices to securely connect to AWS cloud services, such as AWS IoT Core, and perform real-time tasks."}),"\n",(0,n.jsx)(s.h2,{id:"use-cases",children:"Use cases"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"Firmware development for IoT devices"}),"\n",(0,n.jsx)(s.li,{children:"Embedded applications with real-time requirements"}),"\n",(0,n.jsx)(s.li,{children:"Device connectivity to AWS cloud"}),"\n",(0,n.jsx)(s.li,{children:"Task management and communication between components in embedded systems"}),"\n",(0,n.jsx)(s.li,{children:"Industrial automation and control applications"}),"\n"]}),"\n",(0,n.jsx)(s.h2,{id:"key-points",children:"Key points"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"RTOS:"})," Provides operating system functionality for embedded devices, such as multitasking, task scheduling, and inter-task communication"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Open source:"})," Software license that allows use in commercial systems"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Small and efficient:"})," Designed to run on microcontrollers with limited resources"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"AWS IoT integration:"})," Facilitates secure device connection to AWS cloud and integration with IoT services"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Reliability:"})," Developed with emphasis on reliability and ease of use"]}),"\n"]}),"\n",(0,n.jsx)(s.h2,{id:"comparison",children:"Comparison"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"FreeRTOS:"})," A lightweight RTOS optimized for devices with limited resources and real-time requirements. Ideal for applications where response needs to be predictable and fast."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Embedded Linux:"})," A more robust general-purpose operating system with more features, suitable for devices with more processing power and memory. Offers greater flexibility but may have higher latency and resource consumption."]}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},8453:(e,s,t)=>{t.d(s,{R:()=>o,x:()=>a});var i=t(6540);const n={},r=i.createContext(n);function o(e){const s=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),i.createElement(r.Provider,{value:s},e.children)}}}]);