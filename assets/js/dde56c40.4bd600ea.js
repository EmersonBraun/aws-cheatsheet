"use strict";(self.webpackChunkaws_cheatsheet=self.webpackChunkaws_cheatsheet||[]).push([[2708],{1579:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"containers/ecs","title":"AWS ECS (Elastic Container Service)","description":"What is it","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/containers/ecs.md","sourceDirName":"containers","slug":"/containers/ecs","permalink":"/aws-cheatsheet/docs/containers/ecs","draft":false,"unlisted":false,"editUrl":"https://github.com/EmersonBraun/aws-cheatsheet/blob/master/docs/containers/ecs.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"AWS ECR (Elastic Container Registry)","permalink":"/aws-cheatsheet/docs/containers/ecr"},"next":{"title":"AWS EKS (Elastic Kubernetes Service)","permalink":"/aws-cheatsheet/docs/containers/eks"}}');var t=i(4848),r=i(8453);const a={sidebar_position:2},o="AWS ECS (Elastic Container Service)",c={},l=[{value:"What is it",id:"what-is-it",level:2},{value:"What it&#39;s for",id:"what-its-for",level:2},{value:"Use cases",id:"use-cases",level:2},{value:"Key points",id:"key-points",level:2},{value:"Comparison",id:"comparison",level:2}];function d(e){const n={h1:"h1",h2:"h2",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"aws-ecs-elastic-container-service",children:"AWS ECS (Elastic Container Service)"})}),"\n",(0,t.jsx)(n.h2,{id:"what-is-it",children:"What is it"}),"\n",(0,t.jsx)(n.p,{children:"A fully managed container orchestration service that makes it easy to run, stop, and manage Docker containers on a cluster."}),"\n",(0,t.jsx)(n.h2,{id:"what-its-for",children:"What it's for"}),"\n",(0,t.jsx)(n.p,{children:"Running and managing containerized applications at scale, with built-in support for load balancing, auto-scaling, and service discovery."}),"\n",(0,t.jsx)(n.h2,{id:"use-cases",children:"Use cases"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Microservices architecture"}),"\n",(0,t.jsx)(n.li,{children:"Batch processing"}),"\n",(0,t.jsx)(n.li,{children:"Application migration to containers"}),"\n",(0,t.jsx)(n.li,{children:"CI/CD pipeline integration"}),"\n",(0,t.jsx)(n.li,{children:"High-availability applications"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"key-points",children:"Key points"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Container orchestration:"})," Manages container deployment and scaling"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Service integration:"})," Works with ALB, CloudWatch, and other AWS services"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Task definitions:"})," Define container configurations and requirements"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Auto scaling:"})," Automatically scales based on demand"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Security:"})," IAM roles and security groups integration"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"comparison",children:"Comparison"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"AWS ECS vs. EKS:"})," ECS is a simpler container orchestration service that's easier to get started with and integrates well with other AWS services. EKS is a managed Kubernetes service that offers more advanced features and is better for complex container orchestration needs. ECS is ideal for AWS-focused deployments, while EKS is better for organizations that need Kubernetes compatibility or have more complex container orchestration requirements."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>o});var s=i(6540);const t={},r=s.createContext(t);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);