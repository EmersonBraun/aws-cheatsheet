"use strict";(self.webpackChunkaws_cheatsheet=self.webpackChunkaws_cheatsheet||[]).push([[9593],{1411:(e,s,a)=>{a.r(s),a.d(s,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"database/elasticache","title":"AWS ElastiCache","description":"What is it","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/database/elasticache.md","sourceDirName":"database","slug":"/database/elasticache","permalink":"/aws-cheatsheet/en/docs/database/elasticache","draft":false,"unlisted":false,"editUrl":"https://github.com/EmersonBraun/aws-cheatsheet/blob/master/docs/database/elasticache.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"AWS DynamoDB","permalink":"/aws-cheatsheet/en/docs/database/dynamodb"},"next":{"title":"AWS Keyspaces","permalink":"/aws-cheatsheet/en/docs/database/keyspaces"}}');var n=a(4848),i=a(8453);const r={sidebar_position:4},c="AWS ElastiCache",l={},o=[{value:"What is it",id:"what-is-it",level:2},{value:"What it&#39;s for",id:"what-its-for",level:2},{value:"Use cases",id:"use-cases",level:2},{value:"Key points",id:"key-points",level:2},{value:"Comparison",id:"comparison",level:2}];function d(e){const s={h1:"h1",h2:"h2",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.header,{children:(0,n.jsx)(s.h1,{id:"aws-elasticache",children:"AWS ElastiCache"})}),"\n",(0,n.jsx)(s.h2,{id:"what-is-it",children:"What is it"}),"\n",(0,n.jsx)(s.p,{children:"A fully managed in-memory data store and cache service that supports Redis and Memcached, providing sub-millisecond latency to power fast, real-time applications."}),"\n",(0,n.jsx)(s.h2,{id:"what-its-for",children:"What it's for"}),"\n",(0,n.jsx)(s.p,{children:"Improving application performance by retrieving data from fast, managed, in-memory caches instead of slower disk-based databases."}),"\n",(0,n.jsx)(s.h2,{id:"use-cases",children:"Use cases"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"Web session stores"}),"\n",(0,n.jsx)(s.li,{children:"Gaming leaderboards"}),"\n",(0,n.jsx)(s.li,{children:"Real-time analytics"}),"\n",(0,n.jsx)(s.li,{children:"Caching database queries"}),"\n",(0,n.jsx)(s.li,{children:"Message broker"}),"\n",(0,n.jsx)(s.li,{children:"Rate limiting"}),"\n"]}),"\n",(0,n.jsx)(s.h2,{id:"key-points",children:"Key points"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"In-memory performance:"})," Sub-millisecond latency"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Managed service:"})," No server management required"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"High availability:"})," Multi-AZ deployment with automatic failover"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Scalability:"})," Automatic scaling of nodes"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Security:"})," Encryption at rest and in transit"]}),"\n"]}),"\n",(0,n.jsx)(s.h2,{id:"comparison",children:"Comparison"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"AWS ElastiCache vs. Self-managed Redis/Memcached:"})," ElastiCache is a fully managed service that handles the operational aspects of running Redis or Memcached. Self-managed Redis/Memcached gives you more control but requires you to handle all operational tasks. ElastiCache is ideal for applications that need high-performance caching without the operational overhead, while self-managed solutions are better for organizations that need complete control over their caching infrastructure."]}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},8453:(e,s,a)=>{a.d(s,{R:()=>r,x:()=>c});var t=a(6540);const n={},i=t.createContext(n);function r(e){const s=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),t.createElement(i.Provider,{value:s},e.children)}}}]);