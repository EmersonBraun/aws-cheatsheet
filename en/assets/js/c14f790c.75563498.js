"use strict";(self.webpackChunkaws_cheatsheet=self.webpackChunkaws_cheatsheet||[]).push([[7166],{4315:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"application-integration/sqs","title":"AWS SQS (Simple Queue Service)","description":"What is it","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/application-integration/sqs.md","sourceDirName":"application-integration","slug":"/application-integration/sqs","permalink":"/aws-cheatsheet/en/docs/application-integration/sqs","draft":false,"unlisted":false,"editUrl":"https://github.com/EmersonBraun/aws-cheatsheet/blob/master/docs/application-integration/sqs.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"AWS SNS (Simple Notification Service)","permalink":"/aws-cheatsheet/en/docs/application-integration/sns"},"next":{"title":"AWS AppSync","permalink":"/aws-cheatsheet/en/docs/application-integration/appsync"}}');var t=n(4848),r=n(8453);const a={sidebar_position:5},o="AWS SQS (Simple Queue Service)",l={},c=[{value:"What is it",id:"what-is-it",level:2},{value:"What it&#39;s for",id:"what-its-for",level:2},{value:"Use cases",id:"use-cases",level:2},{value:"Key points",id:"key-points",level:2},{value:"Comparison with AWS SNS",id:"comparison-with-aws-sns",level:2}];function d(e){const s={h1:"h1",h2:"h2",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"aws-sqs-simple-queue-service",children:"AWS SQS (Simple Queue Service)"})}),"\n",(0,t.jsx)(s.h2,{id:"what-is-it",children:"What is it"}),"\n",(0,t.jsx)(s.p,{children:"A fully managed message queue service that allows sending, storing, and receiving messages between software components at any volume."}),"\n",(0,t.jsx)(s.h2,{id:"what-its-for",children:"What it's for"}),"\n",(0,t.jsx)(s.p,{children:"Decouple and scale microservices, distributed systems, and serverless applications, ensuring messages are processed asynchronously and reliably."}),"\n",(0,t.jsx)(s.h2,{id:"use-cases",children:"Use cases"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Decoupling application components"}),"\n",(0,t.jsx)(s.li,{children:"Background task processing"}),"\n",(0,t.jsx)(s.li,{children:"Message delivery between microservices"}),"\n",(0,t.jsx)(s.li,{children:"Work queue management for batch processing"}),"\n",(0,t.jsx)(s.li,{children:"Request buffering to handle traffic spikes"}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"key-points",children:"Key points"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Fully managed:"})," AWS handles infrastructure and scalability"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Standard and FIFO queues:"}),' Supports standard queues ("at least once" delivery, no guaranteed order) and FIFO queues (First-In, First-Out, "exactly once" delivery, guaranteed order)']}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Decoupling:"})," Allows message producers and consumers to operate independently"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Scalability:"})," Automatically scales to handle message volume"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Durability:"})," Messages are redundantly stored across multiple Availability Zones"]}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"comparison-with-aws-sns",children:"Comparison with AWS SNS"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"AWS SQS:"})," A message queue service where messages are stored in a queue until a consumer processes them. Ideal for scenarios where messages need to be processed by a single consumer or where order and delivery guarantee are crucial."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"AWS SNS:"})," A pub/sub notification service where a message is sent to a topic and delivered to all subscribers. Ideal for scenarios where the same message needs to be delivered to multiple consumers."]}),"\n"]})]})}function u(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>a,x:()=>o});var i=n(6540);const t={},r=i.createContext(t);function a(e){const s=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(r.Provider,{value:s},e.children)}}}]);