"use strict";(self.webpackChunkaws_cheatsheet=self.webpackChunkaws_cheatsheet||[]).push([[1383],{2188:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>c,metadata:()=>t,toc:()=>r});const t=JSON.parse('{"id":"compute/ec2-auto-scaling","title":"AWS EC2 Auto Scaling","description":"What is it","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/compute/ec2-auto-scaling.md","sourceDirName":"compute","slug":"/compute/ec2-auto-scaling","permalink":"/aws-cheatsheet/en/docs/compute/ec2-auto-scaling","draft":false,"unlisted":false,"editUrl":"https://github.com/EmersonBraun/aws-cheatsheet/blob/master/docs/compute/ec2-auto-scaling.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"AWS EC2 (Elastic Compute Cloud)","permalink":"/aws-cheatsheet/en/docs/compute/ec2"},"next":{"title":"AWS Batch","permalink":"/aws-cheatsheet/en/docs/compute/batch"}}');var a=n(4848),s=n(8453);const c={sidebar_position:2},o="AWS EC2 Auto Scaling",l={},r=[{value:"What is it",id:"what-is-it",level:2},{value:"What it&#39;s for",id:"what-its-for",level:2},{value:"Use cases",id:"use-cases",level:2},{value:"Key points",id:"key-points",level:2},{value:"Comparison",id:"comparison",level:2}];function d(e){const i={h1:"h1",h2:"h2",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(i.header,{children:(0,a.jsx)(i.h1,{id:"aws-ec2-auto-scaling",children:"AWS EC2 Auto Scaling"})}),"\n",(0,a.jsx)(i.h2,{id:"what-is-it",children:"What is it"}),"\n",(0,a.jsx)(i.p,{children:"A service that automatically adjusts the number of EC2 instances in your application to maintain performance and availability while optimizing costs."}),"\n",(0,a.jsx)(i.h2,{id:"what-its-for",children:"What it's for"}),"\n",(0,a.jsx)(i.p,{children:"Automatically scaling your application's compute capacity up or down based on demand, ensuring optimal performance and cost efficiency."}),"\n",(0,a.jsx)(i.h2,{id:"use-cases",children:"Use cases"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsx)(i.li,{children:"Web applications with variable traffic"}),"\n",(0,a.jsx)(i.li,{children:"Batch processing jobs"}),"\n",(0,a.jsx)(i.li,{children:"Applications with predictable load patterns"}),"\n",(0,a.jsx)(i.li,{children:"High-availability applications"}),"\n",(0,a.jsx)(i.li,{children:"Cost optimization for variable workloads"}),"\n"]}),"\n",(0,a.jsx)(i.h2,{id:"key-points",children:"Key points"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.strong,{children:"Dynamic scaling:"})," Automatically adjusts capacity based on demand"]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.strong,{children:"Predictive scaling:"})," Uses machine learning to predict traffic patterns"]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.strong,{children:"Scheduled scaling:"})," Scales based on predictable load changes"]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.strong,{children:"Health checks:"})," Automatically replaces unhealthy instances"]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.strong,{children:"Multiple scaling policies:"})," Target tracking, step scaling, and simple scaling"]}),"\n"]}),"\n",(0,a.jsx)(i.h2,{id:"comparison",children:"Comparison"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.strong,{children:"AWS EC2 Auto Scaling vs. Manual Scaling:"})," Auto Scaling automatically adjusts capacity based on demand, reducing operational overhead and ensuring optimal performance. Manual scaling requires human intervention to add or remove instances, which can lead to over-provisioning or under-provisioning. Auto Scaling is ideal for applications with variable workloads, while manual scaling might be suitable for applications with stable, predictable loads."]}),"\n"]})]})}function h(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,a.jsx)(i,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>c,x:()=>o});var t=n(6540);const a={},s=t.createContext(a);function c(e){const i=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:c(e.components),t.createElement(s.Provider,{value:i},e.children)}}}]);